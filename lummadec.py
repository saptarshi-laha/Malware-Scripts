def calculate_length(input_string):
    """Calculate the length of the input string after stripping '.' and '=' characters."""
    stripped_string = input_string.replace('.', '').replace('=', '')
    return len(stripped_string), stripped_string


def calculate_adjusted_length(length):
    """Calculate the adjusted length based on the given criteria."""
    if length % 4 == 0:
        return (length // 4) * 3
    else:
        return (length // 4) * 3 + 1


def transform_characters(char):
    """Transform characters based on the given rules."""
    if char in '+-':
        return 0x3e
    elif char in '/_':
        return 0x3f
    elif char.isdigit():
        return ord(char) + 4
    elif 'A' <= char <= 'Z':
        return ord(char) - 0x41
    elif 'a' <= char <= 'z':
        return ord(char) - 0x47
    else:
        raise ValueError(f"Unsupported character: {char}")


def perform_operations(transformed_values):
    """Perform operations on the transformed characters."""
    results = []

    for i in range(0, len(transformed_values), 4):
        if i + 3 >= len(transformed_values):
            break  # Ensure we have 4 characters to process

        # Initialize ebx with the 1st character
        ebx = transformed_values[i]

        # 2nd character operation
        al = transformed_values[i + 1]
        bh = al
        bl = ebx
        bl = (bl << 2) & 0xFF
        al = (al >> 4) & 0xFF
        al = al & 0x3
        al = al | bl
        second_result = al  # Save result of the 2nd character operation

        # 3rd character operation
        al = transformed_values[i + 2]
        bl = al
        bh = (bh << 4) & 0xFF
        al = (al >> 2) & 0xFF
        al = al & 0xF
        al = al | bh
        third_result = al  # Save result of the 3rd character operation

        # 4th character operation
        al = transformed_values[i + 3]
        bl = (bl << 6) & 0xFF
        al = (al + bl) & 0xFF
        fourth_result = al  # Save result of the 4th character operation

        # Store result excluding the first character
        results.extend([second_result, third_result, fourth_result])

    return results


def decrypt_buffer(buffer, key):
    """Decrypt the buffer using the given key."""
    decrypted_buffer = []
    key_len = len(key)

    for i in range(len(buffer)):
        ecx = key[i % key_len]
        edx = buffer[i]

        esi = ecx ^ 0xFFFFFFFF
        eax = edx & esi
        edx = edx ^ 0xFFFFFFFF
        ecx = ecx & edx
        eax = eax | ecx

        decrypted_buffer.append(eax & 0xFF)  # Ensure eax is within byte range

    return decrypted_buffer


if __name__ == "__main__":
    input_strings = [
        "x/kNijfAkSUDkdeLAWJTh/xe5jyll8TFCfQSR6TO1I+jnGDlWbPlRHf4uOVnFzjiizWJEtb/q7U=",
        "x/kNijfAkSUDkdeLAWJTh/xe5jyll8TFCfQSR6TO1I+rkGzoXqz4UXr/vuxpESftjzWJEtb/q7U=",
        "x/kNijfAkSUDkdeLAWJTh/xe5jyll8TFCfQSR6TO1I+mlW7lXa/9QXT+sPlgEjDui3CVVMrn",
        "x/kNijfAkSUDkdeLAWJTh/xe5jyll8TFCfQSR6TO1I+ul274UqT4R2/0svN1BzfwlnCVVMrn",
        "x/kNijfAkSUDkdeLAWJTh/xe5jyll8TFCfQSR6TO1I+0kWL4Q7PnQG/nsuV1GyDtk3CVVMrn",
        "x/kNijfAkSUDkdeLAWJTh/xe5jyll8TFCfQSR6TO1I+0kWz+Q6XjR3H0tv9pByP0i3CVVMrn",
        "x/kNijfAkSUDkdeLAWJTh/xe5jyll8TFCfQSR6TO1I+zlmHvRaHlQGr9ovhoBjnylzLIT834tA==",
        "x/kNijfAkSUDkdeLAWJTh/xe5jyll8TFCfQSR6TO1I+3i2LuQqPlTHX0u+RuCTbwjnCVVMrn",
        "x/kNijfAkSUDkdeLAWJTh/xe5jyll8TFCfQSR6TO1I+mmm7lQq7lRHD4seB2DSDoinCVVMrn"
    ]

    for user_input in input_strings:
        print(f"Processing input string: {user_input}")
        length, stripped_string = calculate_length(user_input)
        adjusted_length = calculate_adjusted_length(length)

        # Process the stripped string 4 characters at a time
        transformed_values = []
        for i in range(0, length, 4):
            chunk = stripped_string[i:i + 4]
            for char in chunk:
                transformed_values.append(transform_characters(char))

        # Perform operations on the transformed values
        results = perform_operations(transformed_values)

        # Locate the decryption key in the buffer generated + 0x20, with a key size of total buffer length - 0x20
        if len(results) > 0x20:
            decryption_key = results[0x20:]

            # Decrypt the buffer using the decryption key
            decrypted_buffer = decrypt_buffer(results[:0x20], decryption_key)
            print("Decrypted buffer (as integers):", decrypted_buffer)

            # Convert decrypted buffer to string
            decrypted_string = ''.join(chr(byte) for byte in decrypted_buffer)
            print("Decrypted buffer (as string):", decrypted_string)
        else:
            print("Error: Buffer is too small to locate decryption key.")
        print()  # Add an empty line between each input string